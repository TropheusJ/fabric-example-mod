import io.github.tropheusj.auto_maintainer.AutoMaintainerPlugin
import io.github.tropheusj.auto_maintainer.BranchCreationMode
import io.github.tropheusj.auto_maintainer.Util

//file:noinspection GroovyAssignabilityCheck
//file:noinspection GroovyAccessibility
//file:noinspection GradlePackageVersionRange
plugins {
	id "fabric-loom" version "0.12-SNAPSHOT"
	id "io.github.juuxel.loom-quiltflower" version "1.+" // Quiltflower, a better decompiler
	id "org.quiltmc.quilt-mappings-on-loom" version "4.2.0" // Quilt Mappings, for parameters and javadoc. Also hashed mojmap.
	id "io.github.p03w.machete" version "1.+" // automatic jar compressing on build
	id "org.ajoberstar.grgit" version "4.1.1"
	id "maven-publish"
}

apply plugin: AutoMaintainerPlugin

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

archivesBaseName = project.archives_base_name
group = project.maven_group

ext.buildNumber = System.getenv("GITHUB_RUN_NUMBER")
String patch = buildNumber != null ? buildNumber : "99999"
version = project.mod_version.replace("<build>", patch)

repositories {
	maven { url = "https://api.modrinth.com/maven" }
	maven { url = "https://maven.bai.lol" }
	maven { url = "https://maven.terraformersmc.com/releases/" }
	maven { url = "https://maven.shedaniel.me/" }
}

dependencies {
	// dev environment
	minecraft("com.mojang:minecraft:${project.minecraft_version}")
	mappings loom.layered {
		it.addLayer(quiltMappings.mappings("org.quiltmc:quilt-mappings:${project.minecraft_version}+build.${project.qm_build}:v2"))
		it.officialMojangMappings {
			setNameSyntheticMembers(false)
		}
	}
	modImplementation("net.fabricmc:fabric-loader:${project.loader_version}")
	modLocalRuntime("maven.modrinth:lazydfu:0.1.2")
	modLocalRuntime("maven.modrinth:suggestion-tweaker:${project.suggestion_tweaker_version}+fabric")
	modLocalRuntime("me.shedaniel.cloth:cloth-config-fabric:${project.cloth_config_version}") { exclude(group: "net.fabricmc.fabric-api") }
	modLocalRuntime("mcp.mobius.waila:wthit:fabric-${project.wthit_version}")
	modLocalRuntime("maven.modrinth:badpackets:fabric-${project.bad_packets_version}")
	modLocalRuntime("maven.modrinth:sodium:${project.sodium_version}") // rendering beware
    localRuntime("org.joml:joml:1.10.4")
//	modLocalRuntime("maven.modrinth:lithium:${project.lithium_version}")
	modLocalRuntime("maven.modrinth:iris:${project.iris_version}")
	modLocalRuntime("com.terraformersmc:modmenu:${project.mod_menu_version}") { exclude group: "net.fabricmc"; exclude group: "net.fabricmc.fabric-api" }

	// dependencies
	modImplementation("net.fabricmc.fabric-api:fabric-api:${project.fabric_version}")
}

task buildOrPublish {
	group = "build"
	String mavenUser = System.getenv().MAVEN_USER
	if (mavenUser != null && !mavenUser.isEmpty()) {
		dependsOn(tasks.getByName("publish"))
		println("prepared for publish")
	} else {
		dependsOn(tasks.getByName("build"))
		println("prepared for build")
	}
}

processResources {
	Map<String, String> properties = new HashMap<>()
	properties.put("version", project.version)
	properties.put("loader_version", project.loader_version)
	properties.put("fabric_version", project.fabric_version)
	properties.put("minecraft_version", Util.versionToSemver(project.minecraft_version))
	properties.put("java_version", sourceCompatibility)

	properties.forEach((k, v) -> inputs.property(k, v))

	filesMatching("fabric.mod.json") {
		expand properties
	}
}

sourceSets {
	testmod {
		compileClasspath += main.compileClasspath
		compileClasspath += main.output
		runtimeClasspath += main.runtimeClasspath
		runtimeClasspath += main.output
	}
}

loom {
	runs {
		testmodClient {
			client()
			name "Testmod Client"
			source sourceSets.testmod
			runDir "run/test"
		}
		testmodServer {
			server()
			name "Testmod Server"
			source sourceSets.testmod
			runDir "run/test_server"
		}
		gametest {
			server()
			name "Test"
			source sourceSets.testmod
			vmArg "-Dfabric-api.gametest"
			vmArg "-Dfabric-api.gametest.report-file=${project.buildDir}/junit.xml"
			runDir "run/gametest_server"
		}
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = Integer.parseInt(sourceCompatibility)
}

java {
	withSourcesJar()
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.archivesBaseName}" }
	}
}

publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}

	repositories {
		maven {
			url = "https://mvn.devos.one/${System.getenv().PUBLISH_SUFFIX}/"
			credentials {
				username = System.getenv().MAVEN_USER
				password = System.getenv().MAVEN_PASS
			}
			authentication { basic(BasicAuthentication) }
		}
	}
}

// --- auto-updating ---

autoMaintainer {
	allowUnstableUpdates = true
	branchFormat = "mc%s"
	branchCreationMode = BranchCreationMode.PATCH
	modrinthUpdateIfAvailable("LazyDFU", "hvFnDODi")
	modrinthDisableIfUnavailable("Suggestion Tweaker", "MBLj38R0")
	modrinthDisableIfUnavailable("WTHIT", "6AQIaxuO")
	modrinthDisableIfUnavailable("Bad Packets", "ftdbN0KK")
	modrinthDisableIfUnavailable("Sodium", "AANobbMI")
	modrinthDisableIfUnavailable("Lithium", "gvQqBUqZ")
	modrinthDisableIfUnavailable("Iris", "YL57xq9U")
	modrinthDisableIfUnavailable("Mod Menu", "mOgUt4GM")
}
